[[policies]]
== Policies

Policies add governance, ease of use, cost-savings, and auditing features to |morpheus| . Policies can be created in the Policies tabs in Groups and Clouds. Policy generation is a role permission.

Policies apply towards any instance provisioned into a group or cloud with active policies. Cloud policies will override matching or conflicting group policies during provisioning.

Available Policy Types:

* Expiration
* Host Name
* Hostname
* Instance Name
* Max Containers
* Max Cores
* Max Hosts
* Max Memory
* Max Storage
* Max VMs
* Provision Approval
* Shutdown

=== Creating Policies

Policies can be created, edited, and set to active or inactive in the a group or cloud detail pane under the Policies tab.

To create a new policy, select ADD POLICY and choose from the available policy types:

=== Expiration Policies

Expiration policies set an expiration timeframe for any instance provisioned into the cloud or group the policy is added to. When an instance expires, it is terminated and deleted.

Configuration options for expiration policies:

* *Expiration Type*
** User Configurable- expiration timeframe is editable during provisioning
** Fixed Expiration- user cannot change expiration timeframe
* *Expiration Days*
Configures the number of days the instance is allowed to exist before being removed.
* *Renewal Days*
If the instance is renewed, this is the number of days by which the expiration date is increased.
* *Notification Days*
This allows an email notice to be sent out X days before the instance is set to expire.
* *Notification Message*
Customizable message for notification email. The default message is `Instance ${instance?.name} is set to expire on ${instance?.expireDate}`

* *Auto Approve Extensions*
Enable this to auto-approve extension requests, bypassing approval workflows.


Instances with expirations show the time until expiration in the instance detail pane. Instances with active expiration policies can be extended by selecting the EXTEND NOW button in the instance detail pane. The extension length is set in the policy by the RENEWAL DAYS field.

Expirations can also be added to any instance during provisioning by entering the number of days in the EXPIRATION DAYS field in the Lifecycle section of the automation section of the provisioning wizard. Expiration can be added to any instance even if no policies have been created.

=== Naming Policies

Naming Policies will populate a fixed or editable name for instances, hosts and hostnames. The Name Pattern field uses ${variable} string interpolation.

Available Variables for naming patterns are:

|===
| groupName | groupCode | cloudName | cloudCode
| type | accountID | account | accountType
| platform | userID | userName | userInitials
| provisionType | | |
|===


An example for an instance name policy using a naming pattern with users initials, cloud code, instance type, and adds a sequential number is:

  ${userInitials}-${cloudCode}-${type}-${sequence}

Naming policies can be configure to be user configurable or static, and to auto-resolve naming conflicts.

Cloud codes and Group codes are fields found in their respective configuration panes.


=== Shutdown Policies

Shutdown policies dictate the number of days an instance is allowed to run before it is shut down.  Shutdown is consistent across cloud types i.e.: in VMware, a VM is powered off.  In AWS, an instance is stopped.  Etc.

Configuration options for shutdown policies:

* *Shutdown Type*
** User Configurable- shutdown timeframe is editable during provisioning
** Fixed Expiration- user cannot change shutdown timeframe
* *Expiration Days*
Configures the number of days the instance is allowed to exist before being shut down.
* *Renewal Days*
If the instance is renewed, this is the number of days by which the shutdown date is increased.
*Notification Days*
This allows an email notice to be sent out X days before the instance is set to shut down.
* *Notification Message*
Customizable message for notification email. The default message is `Instance ${instance?.name} is set to shut down on ${instance?.shutdownDate}`
* *Auto Approve Extensions*
Enable this to auto-approve extension requests, bypassing approval workflows.


=== Provision Approval

|morpheus| Provision Approvals enable an approval workflow via internal |morpheus| approval or via ServiceNow workflow.  If a ServiceNow integration is present, the ServiceNow option is enabled.  The Approval workflow to be selected is dynamically created by querying the ServiceNow Workflow table in the integrated ServiceNow instance.

This ServiceNow approval integration enables users to use the |morpheus| Self-Service provisioning portal to provision new instances and still respect the required ServiceNow business approval workflow.
