ArubaCX Network Integration
--------

Overview
^^^^^^^^
The ArubaCX network plugin is implemented as a Morpheus GenericIntegrationProvider in Groovy. The plugin handles network and cluster events generated by Morpheus and modifies the configuration of Aruba CX switches based on the cable connections between the affected servers and switches.
|morpheus| integrates directly with ArubaCX to create or delete networks for OVS Port Groups that are added or deleted within a configured Cluster.

Features
^^^^^^^^

* Network - Create or Delete OVS Port Group.

Prerequisites
^^^^^^^^^^^^^
- A pair of ArubaCX 8325 series switches.
- All the hosts part of the Cluster are connected to these pair of switches.
- REST API access to the ArubaCX switches with Administrative rights.
- User credentials for the ArubaCX switch pair with API access granted and read/write access to the switch configuration.

**Server Network Configuration (Netplan)**

#. On each host, configure a `bond0` interface on the management interfaces.
#. The management interfaces should be connected to the ArubaCX switch pair.
  **A sample configuration is shown below:**
    .. code-block:: markdown
        {
            bonds:
              bond0:
                interfaces:
                  - ens2f0np0
                  - ens1f0np0
                parameters:
                  mode: "active-backup"
            ...
        }

**Switch Configuration**

#. Configure the management interface and IP address on both switches in the pair.
#. The switch pair must be configured with `vsx-sync` enabled for high availability and redundancy.

       **A sample configuration on the switch pair is shown below:**
        .. code-block:: markdown
            vsx
                inter-switch-link lag 256
                role primary
                keepalive peer 192.168.0.1 source 192.168.0.0
                vsx-sync loop-protect-global mclag-interfaces vsx-global

        .. code-block:: markdown
            vsx
                inter-switch-link lag 256
                role secondary
                keepalive peer 192.168.0.0 source 192.168.0.1
                vsx-sync loop-protect-global mclag-interfaces vsx-global

#. Create a Multi-Chassis Link Aggregation Group (MC-LAG) between the ArubaCX switch and the upstream network, referred to as `lag1`.
#. Configure the **lag1** interface on both switches in the pair.
  **A sample configuration on the switch pair is shown below:**
    .. code-block:: markdown
        interface lag 1 multi-chassis
            no shutdown
            no routing
            vlan trunk native 1
            vlan trunk allowed 1,175
            lacp mode active
            loop-protect

#. The switch ports connected to the serverâ€™s management interfaces should be set to `Trunk mode` with a `Native VLAN`.
  **A sample configuration is shown below:**
    .. code-block:: markdown
        interface 1/1/1
        no shutdown
        no routing
        vlan trunk native 175
        vlan trunk allowed 175

.. Note::
    - Making full use of the Morpheus ArubaCX integration requires credentials for Aruba CX switch pair with API access granted and read/write access to switch configuration. See ArubaCX 8325 documentation for more information on user rights administration in that product.
    - Refer to https://apidocs.morpheusdata.com documentation for more information on the Morpheus API.

Adding ArubaCX Integration
^^^^^^^^^^^^^^^^^^^^^^^^^^^
#. Navigate to ``Administration > Integrations``
#. Select :guilabel:`+ New Integration` > Other > ArubaCX
#. Enter the following:

    .. image:: /images/integration_guides/other/arubacx/arubacx_new_integration.png
    .. image:: /images/integration_guides/other/arubacx/arubacx_settings.png

   NAME
    Name of the Integration in |morpheus|
   ENABLED
    Deselect to disable the Integration
   ARUBA SWITCH IP
    Primary switch IP address
   ARUBA SWITCH USERNAME
    Primary switch user username
   ARUBA SWITCH PASSWORD
    Primary switch user password
   ARUBA SWITCH IP
    Secondary switch IP address
   ARUBA SWITCH USERNAME
    Secondary switch user username
   ARUBA SWITCH PASSWORD
    Secondary switch user password

#. Select :guilabel:`SAVE CHANGES`

Upon save the `ArubaCX Network integration` will be created.

.. NOTE:: All fields can be edited after saving.

Adding ArubaCX Integration via API
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#. Generate **Authorization Bearer** token for the appliance using the `/oauth/token` API.

    .. code-block:: bash
        curl --location 'https://<APPLIANCE_URL>/oauth/token?client_id=morph-api&grant_type=password&scope=write' \
        --form 'username="<APPLIANCE_USERNAME>"' \
        --form 'password="<APPLIANCE_PASSWORD>"'

#. Add ArubaCX Integration using the following `/api/integrations` API.

     .. code-block:: bash
        curl --location 'https://<APPLIANCE_URL>/api/integrations' \
        --header 'Content-Type: application/json' \
        --header 'Authorization: Bearer <AUTH_TOKEN>' \
        --data '{
            "integration": {
                "name": "ArubaCX-Network",
                "type": "morpheus-arubacx-plugin.generic",
                "enabled": true,
                "refresh": false,
                "config": {
                    "cm.plugin.ip1": "<SWITCH1_IP>",
                    "cm.plugin.username1": "<SWITCH1_USERNAME>",
                    "cm.plugin.password1": "<SWITCH1_PASSWORD>",
                    "cm.plugin.ip2": "<SWITCH2_IP>",
                    "cm.plugin.username2": "<SWITCH2_USERNAME>",
                    "cm.plugin.password2": "<SWITCH2_PASSWORD>"
                }
            }
        }'

.. NOTE::
    - Replace `<APPLIANCE_URL>` with the appliance URL.
    - Replace `<APPLIANCE_USERNAME>` with the appliance Username.
    - Replace `<APPLIANCE_PASSWORD>` with the appliance Password.
    - Replace `<AUTH_TOKEN>` with the generated token.
    - Replace `<SWITCH1_IP>` with the primary switch IP Address.
    - Replace `<SWITCH1_USERNAME>` with the primary switch Username.
    - Replace `<SWITCH1_PASSWORD>` with the primary switch Password.
    - Replace `<SWITCH2_IP>` with the secondary switch IP Address.
    - Replace `<SWITCH2_USERNAME>` with the secondary switch Username.
    - Replace `<SWITCH2_PASSWORD>` with the secondary switch Password.

Add ArubaCX Integration to a Cluster
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#. In ``Infrastructure > Clusters`` select the target Cluster.
#. Select the `Edit` button for the Cluster.
#. In the `Integrations` dropdown, select an available ArubaCX Integration.
#. Save Changes

    .. image:: /images/integration_guides/other/arubacx/arubacx_edit_cluster.png

Add ArubaCX Integration to a Cluster via API
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#. Get the Cluster ID using the following `/api/clusters` API.

    .. code-block:: bash
        curl --location 'https://<APPLIANCE_URL>/api/clusters' \
        --header 'accept: application/json' \
        --header 'Authorization: Bearer <AUTH_TOKEN>'

#. Associate the ArubaCX Integration to a Cluster using the following `/api/clusters/{id}` API.

    .. code-block:: bash
        curl --request PUT \
             --url https://<APPLIANCE_URL>/api/clusters/<CLUSTER_ID> \
             --header 'accept: application/json' \
             --header 'authorization: Bearer Bearer <AUTH_TOKEN>' \
             --header 'content-type: application/json' \
             --data '{
                  "cluster": {
                    "integrations": [
                      {
                        "id": <INTEGRATION_ID>
                      }
                    ]
                  }
                }'

.. NOTE::
    - Replace `<APPLIANCE_URL>` with the appliance URL.
    - Replace `<CLUSTER_ID>` with the Cluster ID.
    - Replace `<INTEGRATION_ID>` with the ArubaCX Integration ID.
    - The integration ID can be found in the response of the `/api/integrations` POST API from the previous step.
